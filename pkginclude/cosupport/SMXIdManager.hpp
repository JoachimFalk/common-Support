#ifndef INCLUDED_COSUPPORT_SMX_ID_MANAGER
#define INCLUDED_COSUPPORT_SMX_ID_MANAGER

#include "xerces_support.hpp"
#include "string_convert.hpp"

#include <set>
#include <map>

namespace CoSupport {

/// @brief Identifier for elements
typedef uint64_t SMXId;

/**
 * @brief Helper struct for (de)serializing Ids
 */
struct SMXIdSer {
  /// @brief Constructor
  SMXIdSer(SMXId id);

  /// @brief Returns Id
  operator SMXId() const;

  /// @brief The Id
  SMXId id;
};


/// @brief Converts Id to string
template<>
std::string asStr<SMXIdSer>(const SMXIdSer& id);

/// @brief Converts string to Id
template<>
SMXIdSer strAs<SMXIdSer>(const std::string &s);


class SMXIdManager {
public:
  /// @brief Returns single instance of SMXIdManager
  static SMXIdManager& getInstance();

  /// @brief Add node with autogenerated Id
  void addNode(Xerces::XN::DOMNode *n);

  /// @brief Add node with Id
  void addNode(Xerces::XN::DOMNode *n, SMXId id);

  /// @brief Delete node
  void delNode(Xerces::XN::DOMNode* n);

  /// @brief Delete node with the specified id
  void delNode(Xerces::XN::DOMNode* n, SMXId id);
  
  /// @brief Lookup node by Id
  Xerces::XN::DOMNode* getNode(SMXId id) const;

  /// @brief Add reference to Id
  void addNRef(Xerces::XN::DOMAttr* n);

  /// @brief Add reference to Id
  void addNRef(Xerces::XN::DOMAttr* n, SMXId id);

  /// @brief Delete reference
  void delNRef(Xerces::XN::DOMAttr* n);

  /// @brief Delete reference with the specified id
  void delNRef(Xerces::XN::DOMAttr* n, SMXId id);
  
  /// @brief Nodes which reference an Id
  typedef std::set<Xerces::XN::DOMAttr*> NRef;

  /// @brief Lookup referencing nodes by Id
  const NRef* getNRef(SMXId id) const;
  
  /// @brief Analyze node (recursive)
  void analyze(Xerces::XN::DOMNode *n);

private:
  
  struct IdMapEntry {
    /// @brief Node defining the Id
    Xerces::XN::DOMNode* node;
    
    /// @brief Attribute nodes referencing the Id
    NRef nref;

    /// @brief Constructor
    IdMapEntry(Xerces::XN::DOMNode* node);
  };

  /// @brief Maps a specific Id to its node
  typedef std::map<SMXId, IdMapEntry> IdMap;

  /// @brief The IdMap instance
  IdMap idMap;

  /// @brief Invisible default constructor
  SMXIdManager();

  /// @brief Disabled copy constructor
  SMXIdManager(const SMXIdManager&);

  /// @brief Disabled assign operator
  SMXIdManager& operator=(const SMXIdManager&);

  SMXId getUnusedId() const;
};

} // namespace CoSupport

#endif // INCLUDED_COSUPPORT_SMX_ID_MANAGER
