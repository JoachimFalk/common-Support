/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'falk' at '09.01.15 18:34' with Gradle 2.2.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

apply plugin: 'eclipse'

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.7'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile "junit:junit:4.11"
}
*/

project.buildDir = 'obj'


task hello {
    doLast {
        println 'Hello world!'
    }
}

apply plugin: 'cpp'
//apply plugin: 'eclipse-cdt'
apply plugin: 'visual-studio'

//task build(dependsOn: 'assemble') {
//    doLast {
//        println 'Build done!'
//    }
//}

model {
    components {
        "cosupport-base"(NativeLibrarySpec)
        "cosupport-initializer"(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: "cosupport-base"
                }
            }
        }
        "cosupport-smartptr"(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: "cosupport-base"
                }
            }
        }
        "cosupport-xerces"(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: "cosupport-base"
                    lib library: "cosupport-initializer"
                    lib library: "cosupport-string"
                }
            }
        }
        "cosupport-systemc"(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: "cosupport-base"
                }
            }
        }
        "cosupport-streams"(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: "cosupport-base"
                    lib library: "cosupport-string"
                }
            }
        }
        "cosupport-string"(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: "cosupport-base"
                }
            }
        }
        "cosupport-math"(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: "cosupport-base"
                }
            }
        }
        "cosupport-random"(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: "cosupport-base"
                }
            }
        }
        "cosupport-allocators"(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: "cosupport-base"
                    lib library: "cosupport-math"
                }
            }
        }
        "cosupport-path"(NativeLibrarySpec) {
            sources {
                cpp {
                    lib library: "cosupport-base"
                }
            }
        }
    }
}

//model {
//    components {
//        hello(NativeLibrarySpec)
//        main(NativeExecutableSpec) {
//            sources {
//                cpp {
//                    lib library: "hello"
//                }
//            }
//        }
//    }
//}


binaries.all {
    // Define a preprocessor macro for every binary
    cppCompiler.define "NDEBUG"

    // Define toolchain-specific compiler and linker options
    if (toolChain in Gcc) {
        cppCompiler.args "-O2", "-std=gnu++11"
//      cCompiler.args "-O2", "-std=gnu99"
        linker.args "-Xlinker", "-S"
    }
    if (toolChain in VisualCpp) {
        cppCompiler.args "/Zi"
        linker.args "/DEBUG"
    }
}

// For any shared library binaries built with Visual C++, define the DLL_EXPORT macro
binaries.withType(SharedLibraryBinarySpec) {
    if (toolChain in VisualCpp) {
        cppCompiler.define "DLL_EXPORT"
    }
}

